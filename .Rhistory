# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
View(df)
View(df2)
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove type, was likely supposed to be 125
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T))
# check the unique values in each column
# calculate the mean response for PT and LP
# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "in" ~ "learn_out")) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove type, was likely supposed to be 125
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "in" ~ "learn_out")) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove type, was likely supposed to be 125
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# check the unique values in each column
# calculate the mean response for PT and LP
# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "out" ~ "learn_out")) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove type, was likely supposed to be 125
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# check the unique values in each column
# calculate the mean response for PT and LP
# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "out" ~ "learn_out")) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove typo, was likely supposed to be 25 since that's the max possible value
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=F)) %>%
# avg for trait-level learning orientation
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# check the unique values in each column
# calculate the mean response for PT and LP
# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
# could keep the page submit buttons to see how long someone thought about something
df2 <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "out" ~ "learn_out")) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove typo, was likely supposed to be 25 since that's the max possible value
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")))) %>%
# avg for trait-level learning orientation
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# check the unique values in each column
# calculate the mean response for PT and LP
# mutate(PT_avg = rowMeans(select(., starts_with("pt"))))
# preview the cleaned dataset
glimpse(df2)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
?rowMeans
# could keep the page submit buttons to see how long someone thought about something
df <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# REMOVE SURVEYS WHERE PEOPLE DIDN'T ANSWER THE FIRST QUESTION
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "out" ~ "learn_out")) %>%
# indicate if someone passed the second attention check with a 1 and 0 otherwise
mutate(att_check2 = ifelse(att_check2 == "6", 1, 0)) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove typo, was likely supposed to be 25 since that's the max possible value
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T)) %>%
# avg for trait-level learning orientation
# note: someone will still have an average if they're missing an answer, but the NA won't be included in the denominator
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
# same note as above
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# clean letter of support text and extract sentiment
# preview the cleaned dataset
glimpse(df)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# install.packages("janitor")
library(janitor) # used to clean the column names
df <- read.csv('LP_Dictator.csv', na.strings=c("", " "))
# could keep the page submit buttons to see how long someone thought about something
df <- df %>%
# reformat variable names
clean_names() %>%
rename('startDate'='v8', 'endDate'='v9', 'finished'='v10', 'consent'='q44', 'att_check2'='lp_scale_2_6', 'includeOrExclude'='q50') %>%
# Remove survey metadata, blank surveys, and survey with improper responses
select(-(v2:v7), -q1, -(q45_1:q2), -(disc_time_1:disc_time_4), -(learn_time_1:learn_time_4), -(perf_time_1:perf_time_4), -(q18_1:q18_4), -(q21_1:q21_4), -(note_time_1:note_time_4),
-(dg_time_1:dg_time_4), -(q31_1:q31_4), -(q34_1:q34_4), -q24, -q46) %>% # remove metadata columns
filter(consent == 1) %>%  # remove people who decided not to participate , also removes the extra header
filter(startDate != "5/22/13 10:06") %>%   # remove bad survey response (gave the same response to every question, except for the free response where they responded with "f")
# REMOVE SURVEYS WHERE PEOPLE DIDN'T ANSWER THE FIRST QUESTION
# unencoding some responses and converting to factor so they are easier to use
mutate(gender = case_when(gender == "1" ~ "male", gender == 2 ~ "female")) %>% # explicitly code gender
mutate(gender = factor(gender)) %>% # then convert to factor to make it easier to work with in model
mutate(includeOrExclude = case_when(includeOrExclude == "1" ~ "exclude", includeOrExclude == "2" ~ "include")) %>%# explicitly code include or exclude
mutate(includeOrExclude = factor(includeOrExclude)) %>% # convert to factor
# create columns indicating participant's condition
mutate(priming_received = case_when(q10 == "1" ~ "learning", q13 == "1" ~ "performance")) %>% # create column indicating priming received
select(-q10, -q13) %>% # remove separate columns that used to indicate which priming was received
mutate(inOrOut = case_when(q17 == "1" ~ "in", q20 == "1" ~ "out", q38 == "1" ~ "in", q41 == "1" ~ "out")) %>% # indicate in or out-group condition
select(-(q16:q42_4)) %>%  # remove the separate columns used to indicate in or out-group
# singular column indicating participants condition
mutate(condition = case_when(priming_received == "learning" & inOrOut == "in" ~ "learn_in",
priming_received == "learning" & inOrOut == "out" ~ "learn_out",
priming_received == "performance" & inOrOut == "in" ~ "perf_in",
priming_received == "performance" & inOrOut == "out" ~ "learn_out")) %>%
# indicate if someone passed the second attention check with a 1 and 0 otherwise
mutate(att_check2 = ifelse(att_check2 == "6", 1, 0)) %>%
# clean dictator game free response
mutate(dg = as.numeric(gsub("\\D", "", dg))) %>% # remove extra text, just have numbers
mutate(dg = case_when(dg == 125 ~ 25, .default = dg)) %>%  # remove typo, was likely supposed to be 25 since that's the max possible value
# convert data types as needed
mutate_at(c("pt_1", "pt_2", "pt_3", "pt_4", "pt_5"), as.numeric) %>% # convert to numeric to calculate the mean
mutate_at(c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8",
"lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7"),
as.numeric) %>%
# calculate average scores on scales with multiple items
# have to reverse code some items first
# reverse coding for perspective taking
mutate(pt_1_reversed = case_when(pt_1 == "7" ~ 1, pt_1 == "6" ~ 2, pt_1 == "5" ~ 3, pt_1 == "4" ~ 4, pt_1 == "3" ~ 5, pt_1 == "2" ~ 6, pt_1 == "1" ~ 7),
pt_3_reversed = case_when(pt_3 == "7" ~ 1, pt_3 == "6" ~ 2, pt_3 == "5" ~ 3, pt_3 == "4" ~ 4, pt_3 == "3" ~ 5, pt_3 == "2" ~ 6, pt_3 == "1" ~ 7),
pt_5_reversed = case_when(pt_5 == "7" ~ 1, pt_5 == "6" ~ 2, pt_5 == "5" ~ 3, pt_5 == "4" ~ 4, pt_5 == "3" ~ 5, pt_5 == "2" ~ 6, pt_5 == "1" ~ 7)) %>%
# avg for PT
mutate(PT_avg = rowMeans(select(., c("pt_1_reversed", "pt_2", "pt_3_reversed", "pt_4", "pt_5_reversed")), na.rm=T)) %>%
# avg for trait-level learning orientation
# note: someone will still have an average if they're missing an answer, but the NA won't be included in the denominator
mutate(trait_learning_avg = rowMeans(select(., c("lp_scale_1_3", "lp_scale_1_4", "lp_scale_1_5", "lp_scale_1_8", "lp_scale_1_9", "lp_scale_2_2", "lp_scale_2_5", "lp_scale_2_8")), na.rm=T)) %>%
# avg for trait-level learning orientation
# same note as above
mutate(trait_performance_avg = rowMeans(select(., c("lp_scale_1_1", "lp_scale_1_2", "lp_scale_1_6", "lp_scale_1_7", "lp_scale_2_1", "lp_scale_2_3", "lp_scale_2_4", "lp_scale_2_7")), na.rm=T))
# clean letter of support text and extract sentiment
# preview the cleaned dataset
glimpse(df)
# save the cleaned dataset
write.csv(df, 'LP_dictator_cleaned.csv', row.names=F)
# learning vs performance
table(df$priming_received)
# in or out
table(df$inOrOut)
# condition
table(df$inOrOut, df$priming_received)
# gender tables
table(df$gender, df$priming_received)
table(df$gender, df$inOrOut)
print('How many people answered the first attention check, which asked them to summarize what they read?')
table(!is.na(df$att_check))
table(df$att_check2)
print('How many people said to include or exclude their responses?')
table(df$includeOrExclude)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
df <- read.csv("LP_dictator_cleaned.csv")
# Christiana
# graphs for empathy
# df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_violin() + ggtitle("Empathy for In-Group Vs. Out-Group Stranger") +
#   xlab("group") + ylab('empathy')
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_boxplot() + ggtitle("Empathy for In-Group Vs. Out-Group Stranger") +
xlab("group") + ylab('empathy')
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_bar(stat='summary') +
geom_errorbar(stat='summary', width = 0.3) + ggtitle("Average Empathy for In-Group Vs. Out-Group Strangers") + xlab("group") + ylab("average empathy")
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut)) %>% group_by(inOrOut) %>% summarize(n = n(), mean = mean(emp, na.rm=T), sd = sd(emp, na.rm=T), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se) %>% knitr::kable()
# test with removing attention check
# doesn't make a difference, so you can ignore the code below
# df %>% filter(!is.na(inOrOut), !is.na(emp), !is.na(att_check)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_violin()
# # df %>% filter(!is.na(inOrOut), !is.na(emp), !is.na(att_check)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_boxplot()
# df %>% filter(!is.na(inOrOut), !is.na(emp), !is.na(att_check)) %>% ggplot(aes(y=emp, x = inOrOut)) + geom_bar(stat='summary') +
#   geom_errorbar(stat='summary', width = 0.3)
# create summary table with mean, sd, se, and cis after removing attention check
# df %>% filter(!is.na(inOrOut), !is.na(att_check)) %>% group_by(inOrOut) %>% summarize(n = n(), mean = mean(emp, na.rm=T), sd = sd(emp, na.rm=T), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se)
# Kaylee
# graphs for altruism (dictator game)
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_violin() + ggtitle("Distribution of Money Given to Stranger for In-Group Vs. Out-Group") + ylab("Money given to stranger (out of 25)") + xlab("group")
# df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_boxplot()
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_bar(stat='summary') +
geom_errorbar(stat='summary', width = 0.3) + ggtitle('Average Money Given to In-Group Vs. Out-Group Stranger') + ylab("average money") + xlab("Group")
# df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(x=dg)) + geom_histogram() + facet_wrap(~inOrOut)
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% group_by(inOrOut) %>% summarize(n = n(), median = median(dg), mean = mean(dg), sd = sd(dg), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se)  %>% knitr::kable()
# test graphs again after removing attention check
# no affect of attention check, so you can ignore the code below
# df %>% filter(!is.na(inOrOut), !is.na(dg), !is.na(att_check)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_violin()
# df %>% filter(!is.na(inOrOut), !is.na(dg), !is.na(att_check)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_boxplot()
# df %>% filter(!is.na(inOrOut), !is.na(dg), !is.na(att_check)) %>% ggplot(aes(y=dg, x = inOrOut)) + geom_bar(stat='summary') +
#   geom_errorbar(stat='summary', width = 0.3)
# create another summary table after removing people who failed the attention check
# no difference
# df %>% filter(!is.na(inOrOut), !is.na(dg), !is.na(att_check)) %>% group_by(inOrOut) %>% summarize(n = n(), median = median(dg), mean = mean(dg), sd = sd(dg), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se)
# Kennedy
# graphs for perspective taking
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = inOrOut)) + geom_violin() +
ggtitle("Ease of Perspective Taking for In-Group Vs. Out-Group Stranger") + ylab("perspective taking tcores") + xlab("group")
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = inOrOut)) + geom_boxplot() +
ggtitle("Ease of Perspective Taking for In-Group Vs. Out-Group Stranger") + ylab("perspective taking tcores") + xlab("group")
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = inOrOut)) + geom_bar(stat='summary') +
geom_errorbar(stat='summary', width = 0.3) + ggtitle("Average of Perspective Taking Scores for In-Group Vs. Out-Group Strangers") + ylab("perspective taking score Average") + xlab("group")
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut)) %>% group_by(inOrOut) %>% summarize(n = n(), mean = mean(PT_avg, na.rm=T), sd = sd(PT_avg, na.rm=T), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se) %>% knitr::kable()
# Paulina
# empathy
# graphs for empathy
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = priming_received)) + geom_violin() + facet_wrap(~inOrOut) +
ggtitle("Empathy for In-Group Vs. Out-Group Stranger Based on Priming Received") + xlab("priming received") + ylab('empathy')
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = priming_received)) + geom_boxplot() + facet_wrap(~inOrOut) +
ggtitle("Empathy for In-Group Vs. Out-Group Stranger Based on Priming Received") + xlab("priming received") + ylab('empathy')
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% ggplot(aes(y=emp, x = priming_received)) + geom_bar(stat='summary') +
geom_errorbar(stat='summary', width = 0.3) + facet_wrap(~inOrOut) +
ggtitle("Average Empathy for In-Group Vs. Out-Group Strangers Based on Priming Received") + xlab("priming received") + ylab("average empathy")
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut), !is.na(emp)) %>% group_by(inOrOut, priming_received) %>% summarize(n = n(), mean = mean(emp), sd = sd(emp), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se)  %>% knitr::kable()
# Kirsten
# altruism
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = priming_received)) + geom_violin() + facet_wrap(~inOrOut) +
ggtitle("Altruism for In-Group Vs. Out-Group Stranger Based on Priming Received") + xlab("priming received") + ylab('money given to stranger (out of 25 cents)')
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = priming_received)) + geom_boxplot() + facet_wrap(~inOrOut) +
ggtitle("Altruism for In-Group Vs. Out-Group Stranger Based on Priming Received") + xlab("priming received") + ylab('money given to stranger (out of 25 cents)')
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% ggplot(aes(y=dg, x = priming_received)) + geom_bar(stat='summary') +
geom_errorbar(stat='summary', width = 0.3) + facet_wrap(~inOrOut) +
ggtitle("Average Altruism for In-Group Vs. Out-Group Strangers Based on Priming Received") + xlab("priming received") + ylab("average money given to stranger (out of 25 cents)")
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut), !is.na(dg)) %>% group_by(inOrOut, priming_received) %>% summarize(n = n(), mean = mean(dg), sd = sd(dg), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se)  %>% knitr::kable()
# Jaqueline
# perspective taking
# graphs for perspective taking
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = priming_received)) + geom_violin() + facet_wrap(~inOrOut) +
ggtitle("Perspective Taking for In-Group Vs. Out-Group Stranger Based on Priming Received") + ylab("perspective taking scores") + xlab("priming received")
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = priming_received)) + geom_boxplot() + facet_wrap(~inOrOut) +
ggtitle("Perspective Taking for In-Group Vs. Out-Group Stranger Based on Priming Received") + ylab("perspective taking tcores") + xlab("priming received")
df %>% filter(!is.na(inOrOut), !is.na(PT_avg)) %>% ggplot(aes(y=PT_avg, x = priming_received)) + geom_bar(stat='summary') + facet_wrap(~inOrOut) +
geom_errorbar(stat='summary', width = 0.3) +
ggtitle("Average Perspective Taking Scores for In-Group Vs. Out-Group Strangers by Priming") + ylab("perspective taking score average") + xlab("priming received")
# create summary table with mean, sd, se, and cis
df %>% filter(!is.na(inOrOut)) %>% group_by(inOrOut, priming_received) %>% summarize(n = n(), mean = mean(PT_avg, na.rm=T), sd = sd(PT_avg, na.rm=T), se = sd/sqrt(n), lower_ci = mean - 1.96*se, upper_ci = mean + 1.96*se) %>% knitr::kable()
